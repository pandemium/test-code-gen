/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Menu } from "./Menu";
import { MenuCountArgs } from "./MenuCountArgs";
import { MenuFindManyArgs } from "./MenuFindManyArgs";
import { MenuFindUniqueArgs } from "./MenuFindUniqueArgs";
import { CreateMenuArgs } from "./CreateMenuArgs";
import { UpdateMenuArgs } from "./UpdateMenuArgs";
import { DeleteMenuArgs } from "./DeleteMenuArgs";
import { MenuService } from "../menu.service";
@graphql.Resolver(() => Menu)
export class MenuResolverBase {
  constructor(protected readonly service: MenuService) {}

  async _menusMeta(
    @graphql.Args() args: MenuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Menu])
  async menus(@graphql.Args() args: MenuFindManyArgs): Promise<Menu[]> {
    return this.service.menus(args);
  }

  @graphql.Query(() => Menu, { nullable: true })
  async menu(@graphql.Args() args: MenuFindUniqueArgs): Promise<Menu | null> {
    const result = await this.service.menu(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Menu)
  async createMenu(@graphql.Args() args: CreateMenuArgs): Promise<Menu> {
    return await this.service.createMenu({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Menu)
  async updateMenu(@graphql.Args() args: UpdateMenuArgs): Promise<Menu | null> {
    try {
      return await this.service.updateMenu({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Menu)
  async deleteMenu(@graphql.Args() args: DeleteMenuArgs): Promise<Menu | null> {
    try {
      return await this.service.deleteMenu(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
